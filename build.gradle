plugins {
	id 'org.springframework.boot' version '2.5.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'jacoco'
	id 'java'
	id "org.sonarqube" version "3.3"
}

group = 'dev.muin'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

jar {
	enabled = false
}

repositories {
	mavenCentral()
}

jacoco {
	toolVersion = '0.8.5'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'org.mariadb.jdbc:mariadb-java-client'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.5.0'
}

test {
	useJUnitPlatform()
}

jacocoTestReport {
	reports {
		html.enabled true
		xml.enabled true
		csv.enabled false
	}

	def Qdomains = []
	for(qPattern in "**/QA" .. "**/QZ"){
		Qdomains.add(qPattern+"*")
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: ["**/error/*"] + Qdomains)
		}))
	}
	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	def Qdomains = []
	for (qPattern in "*.QA".."*.QZ") {
		Qdomains.add(qPattern + "*")
	}

	violationRules {
		rule {
			element = 'CLASS'

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.70
			}

			excludes = ["**.error.*"] + Qdomains
		}
	}
}